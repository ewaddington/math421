choices = unique(gapminder$continent),
selected = "Asia")
sliderInput("year_range",
"Year Range:",
min = min(gapminder$year),
max = max(gapminder$year),
value = c(1960, 2005))
selectInput("metric",
"Select Metric:",
choices = c("Life Expectancy" = "lifeExp",
"GDP per Capita" = "gdpPercap",
"Population" = "pop"),
selected = "lifeExp")
checkboxGroupInput("country",
"Choose Countries:",
choices = unique(gapminder$country),
selected = c("India", "United States"))
radioButtons("highlight",
"Highlight Region:",
choices = unique(gapminder$continent))
renderDataTable({
gapminder %>%
filter(
continent %in% input$continent,
year >= input$year_range[1] & year <= input$year_range[2],
country %in% input$country
) %>%
datatable()
})
renderDataTable({
gapminder %>%
filter(
continent %in% input$continent,
year >= input$year_range[1] & year <= input$year_range[2],
country %in% input$country
) %>%
datatable()
})
renderPlotly({
data <- gapminder %>%
filter(
continent %in% input$continent,
year >= input$year_range[1] & year <= input$year_range[2],
country %in% input$country
)
p <- ggplot(data, aes(x = year, y = .data[[input$metric]], color = country)) +
geom_line() +
theme_minimal() +
labs(title = paste("Trends in", input$metric), y = input$metric, x = "Year")
ggplotly(p)
})
renderPlot({
gapminder %>%
filter(
continent == input$highlight,
year == max(input$year_range)
) %>%
ggplot(aes(x = reorder(country, .data[[input$metric]]), y = .data[[input$metric]], fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste(input$metric, "in", input$highlight), x = "Country", y = input$metric) +
theme_minimal()
})
tags$div(
tags$a(href = "https://github.com/yourusername/your-repo", "Source Code", target = "_blank"),
tags$a(href = "https://twitter.com/intent/tweet?text=Check+out+this+dashboard!", "Share on Twitter", target = "_blank")
)
output$debugTable <- renderTable({
regionalData()
output$debugTable <- renderTable({
regionalData()
})
regionalData <- reactive({
req(input$region)
gapminder %>% filter(region == input$region)
})
output$regionalPlot <- renderPlot({
req(regionalData()) # Ensure data is available
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
output$debugTable <- renderTable({
regionalData()
})
regionalData <- reactive({
req(input$region)
gapminder %>% filter(region == input$region)
})
output$regionalPlot <- renderPlot({
req(regionalData()) # Ensure data is available
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
unique(gapminder$region)
regionalData <- reactive({
filtered <- gapminder %>% filter(region == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(region == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData()) # Ensure data is not NULL
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
output$regionalPlot <- renderPlot({
req(regionalData()) # Ensure data is not NULL
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
output$regionalPlot <- renderPlot({
tryCatch({
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
}, error = function(e) {
showNotification("Error rendering plot: Check data or inputs", type = "error")
})
})
renderPlot({
gapminder %>%
filter(
continent == input$highlight,
year == max(input$year_range)
) %>%
ggplot(aes(x = reorder(country, .data[[input$metric]]), y = .data[[input$metric]], fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste(input$metric, "in", input$highlight), x = "Country", y = input$metric) +
theme_minimal()
})
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(region == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData())  # Ensure the reactive data is not NULL
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
library(gapminder)
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(region == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData())
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
ui <- fluidPage(
titlePanel("Regional GDP Plot"),
sidebarLayout(
sidebarPanel(
selectInput("region", "Select Region", choices = unique(gapminder$region))
),
mainPanel(
plotOutput("regionalPlot")
)
)
)
library(gapminder)
colnames(gapminder)
selectInput("region", "Select Region", choices = unique(gapminder$continent))
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(region == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData())
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
library(gapminder)
colnames(gapminder)
selectInput("region", "Select Region", choices = unique(gapminder$continent))
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(continent == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData())
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
renderPlot({
gapminder %>%
filter(
continent == input$highlight,
year == max(input$year_range)
) %>%
ggplot(aes(x = reorder(country, .data[[input$metric]]), y = .data[[input$metric]], fill = country)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste(input$metric, "in", input$highlight), x = "Country", y = input$metric) +
theme_minimal()
})
})
library(gapminder)
library(dplyr)
library(ggplot2)
str(gapminder)
unique(gapminder$continent)
library(shiny)
library(gapminder)
ui <- fluidPage(
titlePanel("Regional GDP Per Capita Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("region", "Select Region", choices = unique(gapminder$continent))
),
mainPanel(
plotOutput("regionalPlot")
)
)
)
server <- function(input, output) {
ui <- fluidPage(
titlePanel("Regional GDP Per Capita Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("region", "Select Region", choices = unique(gapminder$continent))
),
mainPanel(
plotOutput("regionalPlot")
)
)
)
server <- function(input, output)
regionalData <- reactive({
req(input$region)
filtered <- gapminder %>% filter(continent == input$region)
validate(
need(nrow(filtered) > 0, "No data available for the selected region.")
)
filtered
})
output$regionalPlot <- renderPlot({
req(regionalData())  # Ensure the reactive data is not NULL
ggplot(regionalData(), aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(gapminder)
library(ggplot2)
library(dplyr)
ui <- fluidPage(
titlePanel("Regional GDP Per Capita Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("region", "Select Region", choices = unique(gapminder$continent))
),
mainPanel(
plotOutput("regionalPlot")
)
)
)
server <- function(input, output)
regionalData <- reactive({
req(input$region)
filtered_data <- gapminder %>% filter(continent == input$region)
validate(
need(nrow(filtered_data) > 0, "No data available for the selected region.")
)
return(filtered_data)
})
output$regionalPlot <- renderPlot({
data <- regionalData()  # Get the filtered data from reactive
ggplot(data, aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
library(shiny)
library(gapminder)
library(ggplot2)
library(dplyr)
ui <- fluidPage(
titlePanel("Regional GDP Per Capita Over Time"),
sidebarLayout(
sidebarPanel(
selectInput("region", "Select Region", choices = unique(gapminder$continent))
),
mainPanel(
plotOutput("regionalPlot")
)
)
)
server <- function(input, output) {
regionalData <- reactive({
req(input$region)
filtered_data <- gapminder %>% filter(continent == input$region)
validate(
need(nrow(filtered_data) > 0, "No data available for the selected region.")
)
return(filtered_data)
})
output$regionalPlot <- renderPlot({
data <- regionalData()
ggplot(data, aes(x = year, y = gdpPercap, color = country)) +
geom_line() +
labs(
title = paste("GDP Per Capita for Region:", input$region),
x = "Year",
y = "GDP Per Capita"
) +
theme_minimal()
})
}
shinyApp(ui = ui, server = server)
fluidPage(
titlePanel("Social Media Links Example"),
sidebarLayout(
sidebarPanel(
# Social Media Links
tags$h4("Follow Us on Social Media:"),
tags$ul(
tags$li(tags$a(href = "https://www.facebook.com/yourpage", target = "_blank", "Facebook")),
tags$li(tags$a(href = "https://twitter.com/yourhandle", target = "_blank", "Twitter")),
tags$li(tags$a(href = "https://www.linkedin.com/in/yourname", target = "_blank", "LinkedIn"))
)
),
mainPanel(
# Add content for the main panel here
)
)
)
server <- function(input, output) {
facebook_data <- data.frame(
Date = as.Date('2024-01-01') + 0:5,
Likes = c(120, 150, 170, 130, 180, 200)
)
twitter_data <- data.frame(
Date = as.Date('2024-01-01') + 0:5,
Tweets = c(50, 80, 100, 90, 110, 130)
)
linkedin_data <- data.frame(
Date = as.Date('2024-01-01') + 0:5,
Shares = c(40, 60, 70, 50, 90, 100)
)
selected_data <- reactiveVal(facebook_data)
output$plot <- renderPlot({
data <- selected_data()
ggplot(data, aes(x = Date, y = Likes)) +
geom_line() +
labs(title = "Facebook Data", y = "Likes", x = "Date")
})
output$data_table <- renderTable({
data <- selected_data()
data
})
observeEvent(input$fb_button, {
selected_data(facebook_data)
})
observeEvent(input$tw_button, {
selected_data(twitter_data)
})
observeEvent(input$li_button, {
selected_data(linkedin_data)
})
}
shinyApp(ui = ui, server = server)
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(tidyverse)
library(plotly)
library(knitr)
library(DT)
library(palmerpenguins)
install.packages('palmerpenguins')
# load data in 'global' chunk so it can be shared by all users of the dashboard
library(flexdashboard)
library(tidyverse)
library(plotly)
library(knitr)
library(DT)
library(palmerpenguins)
df <- penguins %>% drop_na()
penguin_species <- unique(df$species)
penguin_islands <- unique(df$island)
sliderInput(inputId = "flipper_input",
label = h3("Flipper Length Range (mm)"),
min = min(df$flipper_length_mm, na.rm = TRUE),
max = max(df$flipper_length_mm, na.rm = TRUE),
value = c(180, 210))
selectInput(inputId = "species_input",
label = h3("Species"),
choices = penguin_species,
selected = 'Adelie')
checkboxGroupInput(inputId = "island_input",
label = h3("Island"),
choices = penguin_islands,
inline = TRUE,
selected = 'Biscoe')
renderPlotly({
p1 <- df %>%
filter(flipper_length_mm > input$flipper_input[1], flipper_length_mm < input$flipper_input[2]) %>%
filter(species == input$species_input) %>%
filter(island %in% input$island_input) %>%
ggplot(aes(x = body_mass_g, color = species)) +
geom_density()
ggplotly(p1)
})
renderPlotly({
p2 <- df %>%
filter(flipper_length_mm > input$flipper_input[1], flipper_length_mm < input$flipper_input[2]) %>%
filter(species == input$species_input) %>%
filter(island %in% input$island_input) %>%
ggplot(aes(x = island, fill = species)) +
geom_bar()
ggplotly(p2)
})
renderPlotly({
p3 <- df %>%
filter(flipper_length_mm > input$flipper_input[1], flipper_length_mm < input$flipper_input[2]) %>%
filter(species == input$species_input) %>%
filter(island %in% input$island_input) %>%
ggplot(aes(x = bill_depth_mm, color = species)) +
geom_density()
ggplotly(p3)
})
image_url <- "https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png"
